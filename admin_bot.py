import logging
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, ForceReply, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from data_manager import data_manager
import os
from dotenv import load_dotenv
from telegram.error import Forbidden

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_TOKEN = os.getenv('ADMIN_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_USER_ID'))
BOT_TOKEN = os.getenv('BOT_TOKEN')  # –¢–æ–∫–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

# –°–æ—Å—Ç–æ—è–Ω–∏—è
WAITING_MESSAGE = 1
WAITING_COMMENT = 2
SELECTING_USER = 3  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
ENTERING_MESSAGE = 4  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∞
admin_keyboard = ReplyKeyboardMarkup([
    ['üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'],
    ['üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å', 'üì§ –≠–∫—Å–ø–æ—Ä—Ç'],
    ['‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ']
], resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
cancel_keyboard = ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∞']], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω-–±–æ—Ç–æ–º"""
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await update.message.reply_text(
        "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å FitTracking Bot",
        reply_markup=admin_keyboard
    )

async def show_general_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä–∞—Ñ–æ–Ω–∞"""
    if update.effective_user.id != ADMIN_ID:
        return
        
    users = data_manager.get_all_users()
    
    if not users:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=admin_keyboard
        )
        return
    
    total_users = len(users)
    active_today = 0
    total_meals = 0
    total_cardio = 0
    total_strength = 0
    weight_progress = 0
    
    message = "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞:\n\n"
    
    for user in users:
        stats = data_manager.get_user_stats(user['user_id'])
        user_data = data_manager.load_user_data(user['user_id'])
        
        # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        if stats['today_meals'] > 0 or stats['today_cardio'] or stats['today_strength']:
            active_today += 1
            
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_meals += len(user_data.get('meals', []))
        total_cardio += len(user_data.get('cardio', []))
        total_strength += len(user_data.get('strength', []))
        
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–µ—Å—É
        if stats['weight_diff'] < 0:
            weight_progress += 1
    
    message += (
        f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {total_users}\n"
        f"üì± –ê–∫—Ç–∏–≤–Ω—ã —Å–µ–≥–æ–¥–Ω—è: {active_today}\n\n"
        f"üìä –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
        f"üçΩ –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {total_meals}\n"
        f"üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_cardio}\n"
        f"üí™ –°–∏–ª–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_strength}\n"
        f"‚öñÔ∏è –°–Ω–∏–∂–∞—é—Ç –≤–µ—Å: {weight_progress} –∏–∑ {total_users}\n\n"
        f"üíØ –°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {(active_today/total_users*100):.1f}%\n"
    )
    
    await update.message.reply_text(message, reply_markup=admin_keyboard)

async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if update.effective_user.id != ADMIN_ID:
        return
        
    users = data_manager.get_all_users()
    
    if not users:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=admin_keyboard
        )
        return
    
    message = "üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
    for user in users:
        stats = data_manager.get_user_stats(user['user_id'])
        message += (
            f"‚Ä¢ {user['name']}\n"
            f"  ID: {user['user_id']}\n"
            f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['marathon_progress']}/90 –¥–Ω–µ–π\n"
            f"  –í–µ—Å: {stats['weight_diff']:+.1f} –∫–≥\n\n"
        )
    
    await update.message.reply_text(message, reply_markup=admin_keyboard)

async def show_daily_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å"""
    if update.effective_user.id != ADMIN_ID:
        return
        
    users = data_manager.get_all_users()
    
    if not users:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=admin_keyboard
        )
        return
    
    today = datetime.now()
    is_friday = today.weekday() == 4  # 4 = –ø—è—Ç–Ω–∏—Ü–∞
    
    message = f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {today.strftime('%d.%m.%Y')}:\n\n"
    
    for user in users:
        stats = data_manager.get_user_stats(user['user_id'])
        
        meals_status = "‚úÖ" if stats['today_meals'] >= 3 else "‚ùå"
        cardio_status = "‚úÖ" if stats['today_cardio'] else "‚ùå"
        strength_status = "‚úÖ" if stats['today_strength'] else "‚ùå"
        weight_status = "‚úÖ" if is_friday and stats['current_weight'] else "‚ùå" if is_friday else "‚ûñ"
        
        all_done = (
            stats['today_meals'] >= 3 and 
            stats['today_cardio'] and 
            stats['today_strength'] and 
            (not is_friday or (is_friday and stats['current_weight']))
        )
        
        status_emoji = "üåü" if all_done else "‚ö†Ô∏è"
        
        message += (
            f"{status_emoji} {user['name']}:\n"
            f"üçΩ –ü–∏—Ç–∞–Ω–∏–µ (3+): {meals_status} ({stats['today_meals']})\n"
            f"üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ: {cardio_status}\n"
            f"üí™ –°–∏–ª–æ–≤–∞—è: {strength_status}\n"
        )
        
        if is_friday:
            message += f"‚öñÔ∏è –í–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ: {weight_status}\n"
        
        message += "\n"
    
    await update.message.reply_text(message, reply_markup=admin_keyboard)

async def export_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if update.effective_user.id != ADMIN_ID:
        return
        
    users = data_manager.get_all_users()
    
    if not users:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=admin_keyboard
        )
        return
    
    message = "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö:\n\n"
    
    for user in users:
        user_data = data_manager.load_user_data(user['user_id'])
        stats = data_manager.get_user_stats(user['user_id'])
        
        message += (
            f"üë§ {user['name']} (ID: {user['user_id']}):\n"
            f"–°—Ç–∞—Ä—Ç: {user['start_date']}\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['marathon_progress']}/90 –¥–Ω–µ–π\n"
            f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π:\n"
            f"- –ü—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏: {len(user_data.get('meals', []))}\n"
            f"- –ö–∞—Ä–¥–∏–æ: {len(user_data.get('cardio', []))}\n"
            f"- –°–∏–ª–æ–≤—ã—Ö: {len(user_data.get('strength', []))}\n"
        )
        
        if stats['current_weight']:
            message += (
                f"–í–µ—Å: {stats['current_weight']:.1f} –∫–≥ "
                f"(–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {stats['weight_diff']:+.1f} –∫–≥)\n"
            )
        
        message += "\n"
    
    await update.message.reply_text(message, reply_markup=admin_keyboard)

async def start_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    users = data_manager.get_all_users()
    if not users:
        await update.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=admin_keyboard
        )
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    user_buttons = [[f"üë§ {user['name']} (ID: {user['user_id']})"] for user in users]
    user_buttons.append(['‚ùå –û—Ç–º–µ–Ω–∞'])
    user_keyboard = ReplyKeyboardMarkup(user_buttons, resize_keyboard=True)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:",
        reply_markup=user_keyboard
    )
    return SELECTING_USER

async def handle_user_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=admin_keyboard
        )
        return ConversationHandler.END
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    try:
        user_id = update.message.text.split('ID: ')[1].strip(')')
        user_name = update.message.text.split('üë§ ')[1].split(' (ID:')[0]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['selected_user'] = {
            'id': user_id,
            'name': user_name
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_keyboard = ReplyKeyboardMarkup([
            ['‚ùå –û—Ç–º–µ–Ω–∞', '‚Ü©Ô∏è –ù–∞–∑–∞–¥']
        ], resize_keyboard=True)
        
        await update.message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_name}:",
            reply_markup=message_keyboard
        )
        return ENTERING_MESSAGE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=admin_keyboard
        )
        return ConversationHandler.END

async def handle_message_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=admin_keyboard
        )
        return ConversationHandler.END
    
    if update.message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        return await start_send_message(update, context)
    
    selected_user = context.user_data.get('selected_user')
    if not selected_user:
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω.",
            reply_markup=admin_keyboard
        )
        return ConversationHandler.END
    
    message_text = update.message.text
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        main_bot = Application.builder().token(BOT_TOKEN).build()
        async with main_bot:
            await main_bot.bot.send_message(
                chat_id=selected_user['id'],
                text=f"üë®‚Äçüè´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ FitTracking Bot:\n\n{message_text}"
            )
            await update.message.reply_text(
                f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {selected_user['name']}",
                reply_markup=admin_keyboard
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}",
            reply_markup=admin_keyboard
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'selected_user' in context.user_data:
        del context.user_data['selected_user']
    
    return ConversationHandler.END

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if update.effective_user.id != ADMIN_ID:
        return
        
    text = update.message.text
    
    if text == 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_general_stats(update, context)
    elif text == 'üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
        await show_users_list(update, context)
    elif text == 'üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å':
        await show_daily_progress(update, context)
    elif text == 'üì§ –≠–∫—Å–ø–æ—Ä—Ç':
        await export_data(update, context)
    elif text == '‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ':
        return await start_send_message(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"Exception while handling an update: {context.error}")
    
    if isinstance(context.error, Forbidden):
        if "bot was blocked by the user" in str(context.error):
            logging.warning(f"–ë–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return
    
    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    if update and update.effective_message:
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
        )

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–æ–º"""
    query = update.callback_query
    await query.answer()
    
    action, user_id, meal_number = query.data.split('_')
    user_id = str(user_id)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback: action={action}, user_id={user_id}, meal_number={meal_number}")
    
    if action == 'comment':
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['waiting_comment_for'] = {
            'user_id': user_id,
            'meal_number': meal_number
        }
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {context.user_data['waiting_comment_for']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        await query.message.reply_text(
            'üí¨ –ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
            reply_markup=ForceReply(selective=True)
        )
        return WAITING_COMMENT
    
    message = ''
    if action == 'approve':
        message = '‚úÖ –¢—Ä–µ–Ω–µ—Ä –æ–¥–æ–±—Ä–∏–ª —Ç–≤–æ–π –ø—Ä–∏—ë–º –ø–∏—â–∏!'
    elif action == 'reject':
        message = '‚ùå –¢—Ä–µ–Ω–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏.'
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        main_bot = Application.builder().token(BOT_TOKEN).build()
        async with main_bot:
            await main_bot.bot.send_message(chat_id=user_id, text=message)
            await query.message.reply_text('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        await query.message.reply_text('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

async def handle_admin_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞"""
    comment_data = context.user_data.get('waiting_comment_for')
    if not comment_data:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ")
        await update.message.reply_text(
            '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
            reply_markup=admin_keyboard
        )
        return ConversationHandler.END
    
    user_id = comment_data['user_id']
    meal_number = comment_data['meal_number']
    comment = update.message.text
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –¥–ª—è –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏ {meal_number}")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        main_bot = Application.builder().token(BOT_TOKEN).build()
        async with main_bot:
            message = (
                f'üë®‚Äçüè´ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ FitTracking Bot –∫ –ø—Ä–∏–µ–º—É –ø–∏—â–∏ #{meal_number}:\n\n'
                f'{comment}'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–µ–∑ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞
            sent_message = await main_bot.bot.send_message(
                chat_id=user_id,
                text=message
            )
            
            if sent_message:
                logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await update.message.reply_text(
                    '‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
                    reply_markup=admin_keyboard
                )
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")
                await update.message.reply_text(
                    '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è',
                    reply_markup=admin_keyboard
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await update.message.reply_text(
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è',
            reply_markup=admin_keyboard
        )
    finally:
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        del context.user_data['waiting_comment_for']
    
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token(ADMIN_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ$'), start_send_message)],
        states={
            SELECTING_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_selection)],
            ENTERING_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_input)]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    application.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    comment_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_admin_callback, pattern='^comment_')],
        states={
            WAITING_COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_comment)]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    application.add_handler(comment_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback-–∫–Ω–æ–ø–æ–∫ (–æ–¥–æ–±—Ä–∏—Ç—å/–æ—Ç–∫–ª–æ–Ω–∏—Ç—å)
    application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern='^(approve|reject)_'))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 