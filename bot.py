import os
import logging
from datetime import datetime, time, timedelta
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ForceReply, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler, CallbackQueryHandler
from data_manager import data_manager

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
ADMIN_BOT_TOKEN = os.getenv('ADMIN_BOT_TOKEN')
ADMIN_ID = int(os.getenv('ADMIN_USER_ID'))  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —á–∏—Å–ª–æ
MARATHON_DAYS = 90  # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä–∞—Ñ–æ–Ω–∞ –≤ –¥–Ω—è—Ö

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_NAME = 1
WAITING_MEAL_NUMBER = 2
WAITING_FOOD_PHOTO = 3
WAITING_ADMIN_REPLY = 4
WAITING_WEIGHT = 4
WAITING_TRAINER_MESSAGE = 5  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä—É
PHOTO_PROGRESS = 25
WAITING_CARDIO = 6
WAITING_STRENGTH = 7

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
meal_keyboard = ReplyKeyboardMarkup([
    ['1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –ø—Ä–∏—ë–º', '2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –ø—Ä–∏—ë–º'],
    ['3Ô∏è‚É£ –¢—Ä–µ—Ç–∏–π –ø—Ä–∏—ë–º', '4Ô∏è‚É£ –ß–µ—Ç–≤—ë—Ä—Ç—ã–π –ø—Ä–∏—ë–º'],
    ['5Ô∏è‚É£ –ü—è—Ç—ã–π –ø—Ä–∏—ë–º', '‚Ü©Ô∏è –ù–∞–∑–∞–¥']
], resize_keyboard=True)

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
main_keyboard = ReplyKeyboardMarkup([
    ['üçΩ –ü—Ä–∏—ë–º –ø–∏—â–∏', 'üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ'],
    ['üí™ –°–∏–ª–æ–≤–∞—è', '‚öñÔ∏è –í–∑–≤–µ—Å–∏—Ç—å—Å—è'],
    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìã –ü—Ä–∞–≤–∏–ª–∞'],
    ['üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è', '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É']
], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"""
    user_id = str(update.effective_user.id)
    user_data = data_manager.load_user_data(user_id)
    
    if not user_data.get('name'):
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? üòä',
            reply_markup=ForceReply(selective=True)
        )
        return WAITING_NAME
    else:
        await update.message.reply_text(
            f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user_data["name"]}! üëã',
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

async def notify_admin(context: ContextTypes.DEFAULT_TYPE, message: str, photo_file_id: str = None, reply_markup: InlineKeyboardMarkup = None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–±–æ—Ç–∞"""
    try:
        admin_bot = Application.builder().token(ADMIN_BOT_TOKEN).build()
        async with admin_bot:
            if photo_file_id:
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
                file = await context.bot.get_file(photo_file_id)
                photo_bytes = await file.download_as_bytearray()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
                from io import BytesIO
                photo_stream = BytesIO(photo_bytes)
                await admin_bot.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=photo_stream,
                    caption=message,
                    reply_markup=reply_markup
                )
            else:
                await admin_bot.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=message
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        raise

async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"""
    user_name = update.message.text
    user_id = str(update.effective_user.id)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data_manager.save_user_data(user_id, {
        'user_id': user_id,
        'name': user_name,
        'start_date': datetime.now().strftime('%Y-%m-%d'),
        'weight_history': [],
        'meals': [],
        'cardio': [],
        'strength': []
    })
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    admin_message = (
        f'üÜï –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–∞—Ä–∞—Ñ–æ–Ω–∞!\n\n'
        f'üë§ –ò–º—è: {user_name}\n'
        f'üÜî ID: {user_id}\n'
        f'üìÖ –î–∞—Ç–∞: {datetime.now().strftime("%d.%m.%Y %H:%M")}'
    )
    await notify_admin(context, admin_message)
    
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n\n'
        '–Ø ‚Äî —Ç–≤–æ–π Telegram-–±–æ—Ç –∏ –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –º–∞—Ä–∞—Ñ–æ–Ω–µ "–ü–æ—Ä–∞ —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π –ø—Ä–µ—Å—Å".\n\n'
        '–í–º–µ—Å—Ç–µ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º –†–æ–º–∞–Ω–æ–º —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n'
        'üîπ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø—Ä–∏—ë–º–∞–º–∏ –ø–∏—â–∏\n'
        'üîπ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n'
        'üîπ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä–¥–∏–æ\n'
        'üîπ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å\n'
        'üîπ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø–∏—Ç–∞–Ω–∏—è\n'
        'ÔøΩÔøΩ –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ç—è–∂–µ–ª–æ\n\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n\n'
        'üçΩ –ü—Ä–∏—ë–º –ø–∏—â–∏ - —Ñ–∏–∫—Å–∏—Ä—É–π –∫–∞–∂–¥—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏\n'
        'üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ - –æ—Ç–º–µ—á–∞–π —É—Ç—Ä–µ–Ω–Ω–∏–µ –∫–∞—Ä–¥–∏–æ\n'
        'üí™ –°–∏–ª–æ–≤–∞—è - –ø–æ—Å–ª–µ —Å–∏–ª–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n'
        '‚öñÔ∏è –í–∑–≤–µ—Å–∏—Ç—å—Å—è - –∑–∞–º–µ—Ä—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º\n\n'
        '–ì–æ—Ç–æ–≤? –ü–æ–≥–Ω–∞–ª–∏! üí™',
        reply_markup=main_keyboard
    )
    return ConversationHandler.END

async def handle_meal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–Ø –ø–æ–µ–ª'"""
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏:',
        reply_markup=meal_keyboard
    )
    return WAITING_MEAL_NUMBER

async def handle_meal_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏"""
    text = update.message.text
    
    if text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=main_keyboard
        )
        return ConversationHandler.END
        
    if not any(text.startswith(num) for num in ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£']):
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ –∏–∑ –º–µ–Ω—é:',
            reply_markup=meal_keyboard
        )
        return WAITING_MEAL_NUMBER
        
    meal_number = text.split()[0]  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1Ô∏è‚É£" –∏–∑ "1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –ø—Ä–∏—ë–º")
    context.user_data['current_meal'] = meal_number
    
    await update.message.reply_text(
        '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Å–≤–æ–µ–π –µ–¥—ã üì∏\n'
        '–ò–ª–∏ –Ω–∞–∂–º–∏ ‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é',
        reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
    )
    return WAITING_FOOD_PHOTO

async def handle_food_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –µ–¥—ã"""
    user_id = str(update.effective_user.id)
    user_data = data_manager.load_user_data(user_id)
    user_name = user_data['name']
    message = update.message
    meal_number = context.user_data.get('current_meal', '‚ùì')

    if message.text and message.text == '‚Ü©Ô∏è –ù–∞–∑–∞–¥':
        await message.reply_text(
            '–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

    if not message.photo:
        await message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å–≤–æ–µ–π –µ–¥—ã üì∏\n'
            '–ò–ª–∏ –Ω–∞–∂–º–∏ ‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é',
            reply_markup=ReplyKeyboardMarkup([['‚Ü©Ô∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
        )
        return WAITING_FOOD_PHOTO

    photo = message.photo[-1]
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        data_manager.save_meal(user_id, photo.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{user_id}_{meal_number}"),
             InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{user_id}_{meal_number}")],
            [InlineKeyboardButton("üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"comment_{user_id}_{meal_number}")]
        ])

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É
        admin_message = (
            f'üçΩ –ù–æ–≤—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏\n\n'
            f'üë§ {user_name}\n'
            f'#Ô∏è‚É£ –ü—Ä–∏—ë–º {meal_number}\n'
            f'‚è∞ {datetime.now().strftime("%H:%M")}'
        )
        
        await notify_admin(
            context=context,
            message=admin_message,
            photo_file_id=photo.file_id,
            reply_markup=admin_keyboard
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply_text(
            f'–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—ë–º –ø–∏—â–∏ {meal_number} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω ‚úÖ\n'
            '–§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É üë®‚Äçüè´',
            reply_markup=main_keyboard
        )
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É: {e}")
        await message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —Ç—Ä–µ–Ω–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.',
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞ –ø–æ —Ñ–æ—Ç–æ –µ–¥—ã"""
    query = update.callback_query
    action, user_id, meal_number = query.data.split('_')
    user_id = str(user_id)

    if action == 'comment':
        context.user_data['waiting_comment_for'] = user_id
        await query.message.reply_text(
            '–ù–∞–ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
            reply_markup=ForceReply(selective=True)
        )
        return WAITING_ADMIN_REPLY

    message = ''
    if action == 'approve':
        message = '‚úÖ –¢—Ä–µ–Ω–µ—Ä –æ–¥–æ–±—Ä–∏–ª —Ç–≤–æ–π –ø—Ä–∏—ë–º –ø–∏—â–∏!'
    elif action == 'reject':
        message = '‚ùå –¢—Ä–µ–Ω–µ—Ä —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏.'

    await context.bot.send_message(chat_id=user_id, text=message)
    await query.answer('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')

async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∞–¥–º–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = context.user_data.get('waiting_comment_for')
    if not user_id:
        return ConversationHandler.END

    comment = update.message.text
    await context.bot.send_message(
        chat_id=user_id,
        text=f'üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞:\n\n{comment}'
    )
    del context.user_data['waiting_comment_for']
    await update.message.reply_text('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚úÖ')
    return ConversationHandler.END

async def handle_cardio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = data_manager.load_user_data(user_id)
    user_name = user_data['name']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä–¥–∏–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data_manager.save_cardio(user_id, 30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –º–∏–Ω—É—Ç
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –∫–∞—Ä–¥–∏–æ
    admin_message = (
        f'üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n\n'
        f'üë§ {user_name}\n'
        f'‚è∞ {datetime.now().strftime("%H:%M")}'
    )
    await notify_admin(context, admin_message)
    
    messages = [
        f'üèÉ‚Äç‚ôÇÔ∏è –í–∞—É, {user_name}! –ö–∞—Ä–¥–∏–æ –∑–∞—Å—á–∏—Ç–∞–Ω–æ!\n\n'
        '‚ù§Ô∏è –¢–≤–æ—ë —Å–µ—Ä–¥—Ü–µ –≥–æ–≤–æ—Ä–∏—Ç —Å–ø–∞—Å–∏–±–æ\n'
        'üéØ –ñ–∏—Ä —Ç–∞–µ—Ç, –º—ã—à—Ü—ã –∫—Ä–µ–ø–Ω—É—Ç\n'
        'üí™ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!',

        f'üî• –û–≥–æ–Ω—å, {user_name}! –ö–∞—Ä–¥–∏–æ –≤ –∫–æ–ø–∏–ª–∫—É!\n\n'
        'üåü –ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ —Ü–µ–ª–∏\n'
        'üí™ –¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è —Å–∏–ª—å–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –¥–Ω—ë–º!',

        f'‚ö°Ô∏è –°—É–ø–µ—Ä, {user_name}! –ö–∞—Ä–¥–∏–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n\n'
        'üéØ –ü—Ä–µ—Å—Å –≤—Å—ë –±–ª–∏–∂–µ\n'
        'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'
    ]
    
    import random
    await update.message.reply_text(random.choice(messages))

async def handle_strength(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = data_manager.load_user_data(user_id)
    user_name = user_data['name']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–ª–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data_manager.save_strength(user_id, "–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
    admin_message = (
        f'üí™ –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n'
        f'üë§ {user_name}\n'
        f'‚è∞ {datetime.now().strftime("%H:%M")}'
    )
    await notify_admin(context, admin_message)
    
    messages = [
        f'üí™ –ú–æ—â–Ω–æ, {user_name}! –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!\n\n'
        'üî• –ú—ã—à—Ü—ã —Ä–∞—Å—Ç—É—Ç, –∂–∏—Ä —É—Ö–æ–¥–∏—Ç\n'
        'üéØ –¢—ã –Ω–∞ –ø—É—Ç–∏ –∫ —Å–≤–æ–µ–º—É –ª—É—á—à–µ–º—É —Ç–µ–ª—É!',

        f'üèãÔ∏è‚Äç‚ôÇÔ∏è –û—Ç–ª–∏—á–Ω–æ –ø–æ—Ä–∞–±–æ—Ç–∞–ª, {user_name}!\n\n'
        'üí™ –ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Å–∏–ª—å–Ω–µ–µ\n'
        'üéØ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–∑–Ω–æ—Å–∏—Ç—å –∂–∏—Ä –ø–æ –≥—Ä–∞—Ñ–∏–∫—É!',

        f'‚ö°Ô∏è –°–∏–ª–∞ –µ—Å—Ç—å, {user_name}!\n\n'
        'üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞—Å—á–∏—Ç–∞–Ω–∞\n'
        'üî• –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ–∏–∑–±–µ–∂–µ–Ω!'
    ]
    
    import random
    await update.message.reply_text(random.choice(messages))

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(update.effective_user.id)
    stats = data_manager.get_user_stats(user_id)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    progress_squares = ""
    for i in range(90):
        if i < stats['marathon_progress']:
            progress_squares += "üü©"  # –ó–µ–ª–µ–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π
        else:
            progress_squares += "‚¨úÔ∏è"  # –ë–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π
        if (i + 1) % 10 == 0:  # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –∫–∞–∂–¥—ã–µ 10 –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤
            progress_squares += "\n"
    
    message = (
        f"üìä –î–µ–Ω—å {stats['marathon_progress']} –∏–∑ 90\n\n"
        f"{progress_squares}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {stats['days_left']} –¥–Ω–µ–π\n\n"
        f"‚öñÔ∏è –¢–≤–æ–π –ø—É—Ç—å –∫ –ø—Ä–µ—Å—Å—É:\n"
    )
    
    if stats['current_weight'] is not None:
        message += (
            f"–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–µ—Å: {stats['start_weight']:.1f} –∫–≥\n"
            f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {stats['current_weight']:.1f} –∫–≥\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ: {stats['weight_diff']:+.1f} –∫–≥\n"
        )
        
        if stats['weight_diff'] <= 0:
            message += "üî• –ñ–∏—Ä –≥–æ—Ä–∏—Ç!\n"
        else:
            message += "üí™ –í—Ä–µ–º—è –ø–æ–¥–Ω–∞–∂–∞—Ç—å!\n"
    else:
        message += "‚öñÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤–µ—Å–µ\n"
    
    message += "\n–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–æ–¥–≤–∏–≥–∏:\n"
    message += f"üçΩ –ü—Ä–∏—ë–º—ã –ø–∏—â–∏: {stats['today_meals']}/5\n"
    
    if stats['today_cardio']:
        message += "üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ: ‚úÖ üî•\n"
    else:
        message += "üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ: ‚ùå\n"
        
    if stats['today_strength']:
        message += "üí™ –°–∏–ª–æ–≤–∞—è: ‚úÖ üí™\n"
    else:
        message += "üí™ –°–∏–ª–æ–≤–∞—è: ‚ùå\n"
    
    if stats['today_meals'] == 5 and stats['today_cardio'] and stats['today_strength']:
        message += "\nüí™ –¢—ã –ø—Ä–æ—Å—Ç–æ –∫–æ—Å–º–æ—Å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üöÄ"
    elif stats['today_meals'] > 0 or stats['today_cardio'] or stats['today_strength']:
        message += "\nüí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    else:
        message += "\nüí™ –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —ç—Ç–æ—Ç –¥–µ–Ω—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ!"
    
    await update.message.reply_text(message)

async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –º–∞—Ä–∞—Ñ–æ–Ω–∞"""
    rules_text = (
        "üìã –ü–ª–∞–Ω –Ω–∞ 3 –º–µ—Å—è—Ü–∞:\n\n"
        "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
        "‚Ä¢ –°–∏–ª–æ–≤—ã–µ 2-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ –ö–∞—Ä–¥–∏–æ 5-6 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é (–ß–°–° 130-150)\n"
        "‚Ä¢ HIIT 1-2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n\n"
        "üçΩ –ü–∏—Ç–∞–Ω–∏–µ:\n"
        "‚Ä¢ 4-5 –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –≤ –¥–µ–Ω—å\n"
        "‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã –¥–æ 15:00\n"
        "‚Ä¢ –ë–µ–ª–æ–∫ –≤ –∫–∞–∂–¥—ã–π –ø—Ä–∏—ë–º\n"
        "‚Ä¢ –£–∂–∏–Ω –ª—ë–≥–∫–∏–π –∏ –∑–∞ 2-3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞\n\n"
        "üí° –ì–ª–∞–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n"
        "‚Ä¢ –ì–æ–ª–æ–¥ = –µ—à—å –±–µ–ª–æ–∫ (–∫—É—Ä–∏—Ü–∞, —Ä—ã–±–∞, —Ç–≤–æ—Ä–æ–≥)\n"
        "‚Ä¢ –í–µ—á–µ—Ä–æ–º —Ç–æ–ª—å–∫–æ –±–µ–ª–æ–∫ + –∫–ª–µ—Ç—á–∞—Ç–∫–∞\n"
        "‚Ä¢ –ï–¥–∞ –ø—Ä–æ—Å—Ç–∞—è, –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n\n"
        "üéØ –¶–µ–ª—å: —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞ —É–≤–∏–¥–µ—Ç—å –ø—Ä–µ—Å—Å!\n"
        "–ü—Ä–µ—Å—Å –µ—Å—Ç—å —É –≤—Å–µ—Ö ‚Äî –ø–æ—Ä–∞ –µ–≥–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å! üí™"
    )
    await update.message.reply_text(rules_text, reply_markup=main_keyboard)

async def show_motivation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    motivational_messages = [
        "üî• –ó–Ω–∞–µ—à—å, –ø–æ—á–µ–º—É –∫–∞—á–∞—Ç—å –ø—Ä–µ—Å—Å –ª—ë–∂–∞ —Ç—Ä—É–¥–Ω–µ–µ?\n"
        "–ü–æ—Ç–æ–º—É —á—Ç–æ –¥–∏–≤–∞–Ω –æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ! üòÖ\n\n"
        "–ù–æ —Ç—ã —Å–∏–ª—å–Ω–µ–µ –¥–∏–≤–∞–Ω–∞! –í–ø–µ—Ä—ë–¥! üí™",

        "üçï –ü–∏—Ü—Ü–∞ —Å–ø—Ä–æ—Å–∏–ª–∞, –ø–æ—á–µ–º—É —è –µ—ë –Ω–µ –µ–º?\n"
        "–ê —è —Ç–∞–∫–æ–π: '–ò–∑–≤–∏–Ω–∏, –¥–µ—Ç–∫–∞, —É –º–µ–Ω—è —É–∂–µ –µ—Å—Ç—å –∫—É–±–∏–∫–∏!' üòé\n\n"
        "–î–µ—Ä–∂–∏–º –∫—É—Ä—Å –Ω–∞ –ø—Ä–µ—Å—Å! üéØ",

        "üèÉ‚Äç‚ôÇÔ∏è –ú–æ–π –¥–∏–≤–∞–Ω –ø–æ –º–Ω–µ —Å–∫—É—á–∞–µ—Ç...\n"
        "–ù–æ –ø—Ä–µ—Å—Å —Å–∞–º —Å–µ–±—è –Ω–µ —Å–¥–µ–ª–∞–µ—Ç!\n"
        "–ú–æ–∂–µ—Ç, —Å—Ç–æ–∏—Ç –∏—Ö –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å? üòè\n\n"
        "–ü–ª–∞–Ω–∫–∞ –Ω–∞ –¥–∏–≤–∞–Ω–µ - —Ç–æ–∂–µ –ø–ª–∞–Ω–∫–∞! üí™",

        "‚öñÔ∏è –í–µ—Å—ã —Å–∫–∞–∑–∞–ª–∏, —á—Ç–æ —è –ø–æ—Ç–µ—Ä—è–ª 2 –∫–≥...\n"
        "–ò—Å–∫–∞–ª –≤–µ–∑–¥–µ, –Ω–æ, –ø–æ—Ö–æ–∂–µ, –æ–Ω–∏ –º–Ω–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã! üòÖ\n\n"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Ä—è—Ç—å! üéØ",

        "üçó –ö—É—Ä–∏—Ü–∞ —Å–ø—Ä–æ—Å–∏–ª–∞: '–ü–æ—á–µ–º—É —è?'\n"
        "–ê —è –æ—Ç–≤–µ—Ç–∏–ª: '–ü–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã - –ø—É—Ç—å –∫ –ø—Ä–µ—Å—Å—É!'\n"
        "–¢–µ–ø–µ—Ä—å –æ–Ω–∞ –≥–æ—Ä–¥–∏—Ç—Å—è —Å–≤–æ–µ–π –º–∏—Å—Å–∏–µ–π üòå\n\n"
        "–ï—à—å –±–µ–ª–æ–∫ - –±—É–¥—å –≥–µ—Ä–æ–µ–º! üí™"
    ]
    import random
    await update.message.reply_text(random.choice(motivational_messages), reply_markup=main_keyboard)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    
    if text == 'üçΩ –ü—Ä–∏—ë–º –ø–∏—â–∏':
        return await handle_meal(update, context)
    elif text == '‚öñÔ∏è –í–∑–≤–µ—Å–∏—Ç—å—Å—è':
        await update.message.reply_text(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5):',
            reply_markup=ForceReply(selective=True)
        )
        return WAITING_WEIGHT
    elif text == 'üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ':
        await handle_cardio(update, context)
    elif text == 'üí™ –°–∏–ª–æ–≤–∞—è':
        await handle_strength(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_stats(update, context)
    elif text == 'üìã –ü—Ä–∞–≤–∏–ª–∞':
        await show_rules(update, context)
    elif text == 'üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è':
        await show_motivation(update, context)
    elif text == '‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É':
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞
        message_keyboard = ReplyKeyboardMarkup([
            ['‚ùå –û—Ç–º–µ–Ω–∞']
        ], resize_keyboard=True)
        
        await update.message.reply_text(
            'üìù –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞:\n'
            '(–∏–ª–∏ –Ω–∞–∂–º–∏ ‚ùå –û—Ç–º–µ–Ω–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é)',
            reply_markup=message_keyboard
        )
        return WAITING_TRAINER_MESSAGE
    elif text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await update.message.reply_text(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
            reply_markup=main_keyboard
        )
        return ConversationHandler.END
    
    return ConversationHandler.END

async def handle_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–µ—Å–∞"""
    user_id = str(update.effective_user.id)
    text = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–µ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
    
    try:
        weight = float(text.replace(',', '.'))
        logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –≤–µ—Å: {weight}")
        
        if weight < 30 or weight > 200:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å: {weight}")
            await update.message.reply_text(
                '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 200 –∫–≥)',
                reply_markup=ForceReply(selective=True)
            )
            return WAITING_WEIGHT
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å
        logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å {weight} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        save_result = data_manager.save_weight(user_id, weight)
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_result}")
        
        if not save_result:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await update.message.reply_text(
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.',
                reply_markup=main_keyboard
            )
            return ConversationHandler.END
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stats = data_manager.get_user_stats(user_id)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        weight_diff = stats.get('weight_diff', 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if weight_diff == 0:
            message = f'‚úÖ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å: {weight} –∫–≥\n\n–≠—Ç–æ —Ç–≤–æ–µ –ø–µ—Ä–≤–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ!'
        else:
            message = (
                f'‚úÖ –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –≤–µ—Å: {weight} –∫–≥\n\n'
                f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Ä–∞–∑–∞: {weight_diff:+.1f} –∫–≥'
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if weight_diff < 0:
                message += '\n\nüéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™'
            elif weight_diff > 0:
                message += '\n\nüí™ –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –°–ª–µ–¥—É—é—â–µ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ª—É—á—à–µ!'
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        admin_message = (
            f'‚öñÔ∏è –ù–æ–≤–æ–µ –≤–∑–≤–µ—à–∏–≤–∞–Ω–∏–µ!\n\n'
            f'üë§ {data_manager.load_user_data(user_id)["name"]}\n'
            f'üìä –í–µ—Å: {weight} –∫–≥ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: {weight_diff:+.1f} –∫–≥)\n'
            f'üìÖ {datetime.now().strftime("%d.%m.%Y %H:%M")}'
        )
        
        try:
            await notify_admin(context, admin_message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
        
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(message, reply_markup=main_keyboard)
        return ConversationHandler.END
        
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Å–∞: {text}")
        await update.message.reply_text(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ XX.X\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 70.5',
            reply_markup=ForceReply(selective=True)
        )
        return WAITING_WEIGHT
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ—Å–∞: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.',
            reply_markup=main_keyboard
        )
        return ConversationHandler.END

async def handle_trainer_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞"""
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∞':
        await update.message.reply_text(
            '–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
            reply_markup=main_keyboard
        )
        return ConversationHandler.END
    
    user_id = str(update.effective_user.id)
    user_data = data_manager.load_user_data(user_id)
    user_name = user_data['name']
    message = update.message.text
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        reply_keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user_id}")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–±–æ—Ç–∞
        admin_message = (
            f"üì® –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞:\n\n"
            f"üë§ {user_name}\n"
            f"üÜî {user_id}\n\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}"
        )
        
        await notify_admin(context, admin_message, reply_markup=reply_keyboard)
        
        await update.message.reply_text(
            '‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç—Ä–µ–Ω–µ—Ä—É!\n'
            '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.',
            reply_markup=main_keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä—É: {e}")
        await update.message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            reply_markup=main_keyboard
        )
    
    return ConversationHandler.END

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex('^üçΩ –ü—Ä–∏—ë–º –ø–∏—â–∏$'), handle_meal),
            MessageHandler(filters.Regex('^‚öñÔ∏è –í–∑–≤–µ—Å–∏—Ç—å—Å—è$'), lambda u, c: handle_message(u, c)),
            MessageHandler(filters.Regex('^üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ$'), lambda u, c: handle_message(u, c)),
            MessageHandler(filters.Regex('^üí™ –°–∏–ª–æ–≤–∞—è$'), lambda u, c: handle_message(u, c)),
            MessageHandler(filters.Regex('^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$'), lambda u, c: handle_message(u, c)),
            MessageHandler(filters.Regex('^üìã –ü—Ä–∞–≤–∏–ª–∞$'), lambda u, c: handle_message(u, c)),
            MessageHandler(filters.Regex('^üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è$'), lambda u, c: handle_message(u, c)),
            MessageHandler(filters.Regex('^‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä—É$'), lambda u, c: handle_message(u, c))
        ],
        states={
            WAITING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_name)],
            WAITING_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_weight)],
            WAITING_FOOD_PHOTO: [
                MessageHandler(filters.PHOTO, handle_food_photo),
                MessageHandler(filters.TEXT & filters.Regex('^‚Ü©Ô∏è –ù–∞–∑–∞–¥$'), handle_message)
            ],
            WAITING_MEAL_NUMBER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_meal_number),
                MessageHandler(filters.TEXT & filters.Regex('^‚Ü©Ô∏è –ù–∞–∑–∞–¥$'), handle_message)
            ],
            WAITING_TRAINER_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_trainer_message)]
        },
        fallbacks=[
            CommandHandler("start", start),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
        ]
    )
    application.add_handler(conv_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main() 